# -*- coding: utf-8 -*-
"""rithm-generator-with-python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pbQNXuQ46HsycWqMxrQeFq6yXfc3Thp4
"""

!pip install mido

from mido import Message, MidiFile, MidiTrack

import random

ticksDict = {'cuarter_note': 1920, 'half_note': 960, 'whole_note': 480, 'octavo': 240}
rythmDict = {'cuarter_note': 4, 'half_note': 2, 'whole_note': 1, 'octavo': 0.5}
probability = {'cuarter_note': 4, 'half_note': 2, 'whole_note': 1, 'octavo': 0.5}
rythmicNames = ['cuarter_note', 'half_note', 'whole_note', 'octavo']
soloRythm = []
sum = 0

track.append(Message('program_change', program=29, time=0))

mid = MidiFile()
#creamos el track
track = MidiTrack()

mid.tracks.append(track)

mid.tracks

def addNote(note):
  ticks = ticksDict[note]
  track.append(Message('note_on', note = 59, velocity=100, time=0))
  track.append(Message('note_off', note = 59, velocity=100, time=ticks))

while sum < 16:
    newNote = random.choice(rythmicNames)
    filter = random.randint(1,10)
    if filter <= probability[newNote]:
        value = rythmDict[newNote]
        sum += value
        if sum > 16:
          sum -= value
        else:
          soloRythm.append(newNote)
          addNote(newNote)
        
    
print(soloRythm)

mid.save('deepmidi2.mid')

